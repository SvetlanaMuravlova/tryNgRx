{"version":3,"sources":["./src/app/modules/favourite-cities/components/general/general.component.ts","./src/app/modules/favourite-cities/store/favourite-cities/favourite-cities.reducer.ts","./src/app/modules/favourite-cities/store/favourite-cities/favourite-cities.actions.ts","./src/app/modules/favourite-cities/store/favourite-cities/favourite-cities.selectors.ts","./src/app/modules/favourite-cities/favourite-cities-routing.module.ts","./src/app/modules/favourite-cities/favourite-cities.module.ts","./src/app/modules/favourite-cities/store/favourite-cities/favourite-cities.effects.ts"],"names":[],"mappings":"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","file":"modules-favourite-cities-favourite-cities-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\n// import { IweatherState } from '@generalStore/weather.reducer';\nimport { IFavCitiesState } from '@fav-cities/favourite-cities.reducer';\nimport { addKey } from '@fav-cities/favourite-cities.actions'\nimport { currentStateSelector } from '@fav-cities/favourite-cities.selectors';\n\n// import {GetConditionsByKey, GetLocationByKey } from '@generalStore/weather.actions'\n// import { weatherSelector, GWConditionsListSelector, GWLocationsSelector } from '@generalStore/weather.selectors';\nimport { Observable } from 'rxjs';\n// import { CommonService } from '@services/common.service';\nimport { ApiService } from '@services/api.service';\nimport { ICondition } from '@interfaces/interfaces';\n\n@Component({\n  selector: 'app-general',\n  templateUrl: './general.component.html',\n  styleUrls: ['./general.component.scss']\n})\nexport class GeneralComponent implements OnInit {\n  type = 'favourite'\n  objectKeys = Object.keys;\n  // conditions$: Observable<IFavCitiesState> = this.store$.pipe(select(weatherSelector))\n  // list$: Observable<ICondition[]> = this.store$.pipe(select(GWConditionsListSelector))\n  // generalLocations$: Observable<any> = this.store$.pipe(select(GWLocationsSelector))\n  currentState$: Observable<IFavCitiesState> = this.store$.pipe(select(currentStateSelector))\n  state: IFavCitiesState;\n  list : ICondition[];\n  generalLocations: any;\n  constructor(\n    private store$: Store<IFavCitiesState>,\n    // public commonService: CommonService,\n    public apiService: ApiService\n  ) {\n    this.currentState$.subscribe(res => {\n      this.state = res;\n    })\n  }\n\n  ngOnInit(): void {\n    this.getConditions();\n  }\n\n  getConditions() {\n    // let keysObserv = [];\n    // console.log(this.state.keys[0]);\n    this.state.keys.forEach(key => {\n      // keysObserv.push(this.apiService.getConditionBykey(key));\n      // this.store$.dispatch(GetLocationByKey({key}))\n      // this.store$.dispatch(GetConditionsByKey({key}))\n    })\n\n      // this.store$.dispatch(GetLocationByKey({key: this.state.keys[0]}))\n      // this.store$.dispatch(GetConditionsByKey({key: this.state.keys[0]}))\n\n    // this.store$.dispatch(GetConditionsByKey({key: this.state.keys[0]}))\n  }\n\n  // onClickBtn() {\n  //   // this.store$.dispatch(WeatherAddLocation())\n  //   this.commonService.updateStoreWithGeneralLocations(['1', '2', '3'])\n  // }\n\n  getLocationFromLink(link: string) {\n    let key = link.split('/').find(item => this.state.keys.includes(item));\n    return this.generalLocations[key.toString()]\n  }\n\n}\n","import { currentCondition } from '@modules/staticInformation/currentConditions';\nimport { weatherActionsType } from '@fav-cities/favourite-cities.actions';\nimport { ICondition } from '@interfaces/interfaces';\nimport { state } from '@angular/animations';\nimport { addKey } from '@fav-cities/favourite-cities.actions'\n// import { on } '@ngrx/effects';\nexport const FAV_CITIES_REDUCER_NODE = 'favCities';\n\nexport interface IFavCitiesState  {\n    date: string;\n    list: any;\n    keys: string[];\n    loading: boolean;\n    error: string;\n    favLocations:any\n}\n\nconst intialStateCurrentConditions: IFavCitiesState = {\n    date: new Date().toString(),\n    list: {},\n    keys: ['323903', '324505', '325343'],\n    loading: false,\n    error: '',\n    favLocations: {\n        323903: {\n            Type: \"City\",\n            LocalizedName: \"Kharkiv\",\n            Country: \"Ukraine\",\n            GeoPosition: {\n                Longitude: '11111',\n                Latitude: '111111'\n            }\n        },\n        324505: {\n            Type: \"City\",\n            LocalizedName: \"Kharkiv\",\n            Country: \"Ukraine\",\n            GeoPosition: {\n                Longitude: '11111',\n                Latitude: '111111'\n            }\n        },\n        325343: {\n            Type: \"City\",\n            LocalizedName: \"Kharkiv\",\n            Country: \"Ukraine\",\n            GeoPosition: {\n                Longitude: '11111',\n                Latitude: '111111'\n            }\n        }\n    }\n}\n\nexport const favCitiesrReducer = (state: IFavCitiesState  = intialStateCurrentConditions, action) => {\n    switch (action.type) {\n        case weatherActionsType.add:\n            return {\n                ... state,\n                keys: action.keys\n            }\n            break;\n        default:\n            return state\n    }\n}\n\n","import { Action, createAction, props } from \"@ngrx/store\";\n\nexport enum weatherActionsType {\n    add = '[favLocations] add location',\n\n}\n\nexport const addKey = createAction(\n    weatherActionsType.add,\n    props<{key: string}>()\n);\n\n\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { IFavCitiesState, FAV_CITIES_REDUCER_NODE } from '@fav-cities/favourite-cities.reducer';\n\nexport const currentStateFeatureSelector = createFeatureSelector<IFavCitiesState>(FAV_CITIES_REDUCER_NODE);\nexport const currentStateSelector = createSelector(currentStateFeatureSelector, state => state);\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { GeneralComponent } from './components/general/general.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: GeneralComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class FavouriteCitiesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FavouriteCitiesRoutingModule } from './favourite-cities-routing.module';\nimport { GeneralComponent } from './components/general/general.component';\nimport { FAV_CITIES_REDUCER_NODE, favCitiesrReducer} from '@fav-cities/favourite-cities.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { SharedModule } from '@modules/shared/shared.module';\nimport { StoreModule } from '@ngrx/store';\nimport { FavCitiesEffects } from '@fav-cities/favourite-cities.effects'\n\n@NgModule({\n  declarations: [GeneralComponent],\n  imports: [\n    CommonModule,\n    FavouriteCitiesRoutingModule,\n    EffectsModule.forFeature([FavCitiesEffects]),\n    StoreModule.forFeature(FAV_CITIES_REDUCER_NODE, favCitiesrReducer),\n    SharedModule\n  ]\n})\nexport class FavouriteCitiesModule { }\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, mergeMap, catchError, exhaustMap, switchMap, finalize } from 'rxjs/operators';\nimport { ApiService } from '@services/api.service';\n// import { weatherActionsType,  GetConditionsByKey, SetLoading, SetError, GetLocationByKey } from './weather.actions';\n// import { IweatherState } from '@generalStore/weather.reducer';\nimport { Store } from \"@ngrx/store\";\n\n\n@Injectable()\n\nexport class FavCitiesEffects {\n \n  constructor(\n    private actions$: Actions,\n    private apiService: ApiService,\n    // private store$: Store<IweatherState>,\n\n  ) {}\n\n  // loadConditionss$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(GetConditionsByKey),\n  //     mergeMap( (action) => (this.apiService.getConditionBykey(action.key))\n  //       .pipe(\n  //         map(response => {\n  //           this.store$.dispatch(SetError({message: ''}));\n  //           return { type: weatherActionsType.loaddedSuccessCondition, payload: {response: response[0], key: action.key}}\n  //         }),\n  //         catchError((error) => of({ type: weatherActionsType.apiError, payload: error })),\n  //         finalize(() => this.store$.dispatch(SetLoading({value: false})))\n  //       )\n  //     )\n  //   )\n  // );\n\n  \n}"],"sourceRoot":"webpack:///"}